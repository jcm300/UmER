---> Clients:
	--solicitar uma viagem ao táxi mais próximo das suas coordenadas(public void requestRide())
	--solicitar uma viagem a um táxi específico(resquestTaxi(String plate))
	--fazer uma reserva para um táxi específico que, de momento, não está disponível(makeReserve ---> bookTaxi(String plate))

---> Drivers:
	--sinalizar que estão disponíveis para serem requisitados
	--registar uma viagem para um determinado cliente(addTravel???)
	--registar o preço que custou determinada viagem

---> Taxis:
	--Classe Abstrata??? (a gestão da UMeR considera que em qualquer altura pode aumentar o tipo de táxis que fazem parte da rede)
	--um factor de fiabilidade, que determina a capacidade da viatura cumprir o tempo acordado com o cliente. Sempre que se realiza uma viagem é calculado (através da invocação de um random()) a capacidade de o veículo cumprir com o tempo acordado com o cliente. Este factor tem um efeito multiplicador sobre o tempo fornecido ao cliente
	--Existem ainda alguns tipos de viaturas que possibilitam a existência de uma fila de espera de marcações. Quando o táxi não está disponível (por exemplo, pelo facto do condutor estar fora do horário de trabalho) é possível para essas viaturas aceitarem reservas de clientes. As reservas serão satisfeitas por ordem de chegada. Os veículos com fila de espera possibilitam este comportamento, sendo que os demais não exibem este comportamento e nessa situação se a viatura estiver indisponível não será candidata a efectuar viagens.

---> Processo de fazer uma viagem:
	1: O cliente indica as coordenadas x e y em que se encontra
	2: O cliente decide se pretende chamar um táxi específico ou então solicita o que está mais próximo
	3: Por uma questão de simplificação, os UMeR deslocam-se sempre em linha recta
	4: Após ser calculada a distância consegue-se saber, dadas as características do táxi, quanto tempo demora a chegar ao cliente e depois ao destino que o cliente solicita
	5: O táxi indica ao cliente qual o custo estimado da viagem, tendo em conta o deslocamento que é necessário efectuar, e o tempo total de viagem
	6: De acordo com a fiabilidade do carro (e de outros factores que pode considerar: a destreza do condutor, as condições metereológicas, etc.) é calculado o tempo real da viagem. Se a diferença for superior a 25% do tempo estimado, então o preço a cobrar é o combinado com o cliente. Se a diferença for igual ou inferior a 25% o valor é ajustado para o valor real em função do tempo decorrido
	7: O táxi fica no ponto definido como fim da viagem à espera de nova solicitação de serviço
	8: após a viagem o cliente pode dar uma nota ao motorista e fica com o documento relativo à viagem guardado na sua área pessoal

Como factor de diferenciação na solução que cada grupo de POO vai encontrar para resolver este problema, podem pensar que o tempo de viagem (logo o custo) além de ser função de um factor associado ao veículo, pode também ser função das condições atmosféricas ou condicionantes de trânsito. Nesse caso será necessário acrescentar informação a passar nos métodos que suportem estes requisitos.

---> Company:
	Numa primeira fase o UMeR foi pensado para condutores que conduziam a sua viatura e fazem serviço de transporte de clientes. No entanto, e devido ao sucesso do negócio, foram criadas empresas que possuem várias viaturas (em teoria de diversos tipos) e que empregam vários motoristas. A gestão que é feita destas empresas implica que após a criação da empresa se possam adicionar viaturas e motoristas, e que uma mesma viatura possa ser conduzida por motoristas diferentes (em tempos diferentes).

---> App:(Requisitos básicos)
	--Interface Gráfica
	--O estado da aplicação deverá estar pré-populado com um conjunto de dados significativos, que permita testar toda a aplicação no dia da entrega
	--Registar um utilizador, quer cliente quer motorista
	--Validar o acesso à aplicação utilizando as credenciais (email e password), por parte dos clientes e dos motoristas
	--criar e inserir viaturas
	--associar motoristas a viaturas
	--solicitar, por parte de um cliente, uma viagem de ponto P(x,y) para o ponto R(x,y), escolhendo uma viatura ou então solicitando a viatura mais próxima. Caso a viatura seja das que possuem lista de espera, inserir na lista de espera
	--classificar o motorista, após a viagem
	--ter acesso, no perfil de cliente, à listagem das viagens efectuadas (entre datas)
	--ter acesso, no perfil de motorista, à listagem das viagens efectuadas (entre datas)
	--indicar o total facturado por uma viatura, ou empresa de táxis, num determinado período
	--determinar a listagens dos 10 clientes que mais gastam
	--determinar a listagem dos 5 motoristas que apresentam mais desvios entre o valores previstos para as viagens e o valor final facturado
	--gravar o estado da aplicação em ficheiro, para que seja possível retomar mais tarde a execução O programa deve permitir que em qualquer momento se possa guardar em ficheiro a informação existente em memória sobre os utilizadores, viaturas, viagens, etc. A gravação deve ser feita de forma a permitir que o estado que foi gravado seja recuperado novamente. Na altura da entrega do projecto deve ser também entregue um estado (guardado em ficheiro) que possa ser carregado durante a apresentação. Este estado deve conter dados significativos e que permitam testar toda a aplicação.

---> Relatorio: ...
